[tool.poetry]
name = "patch-langchain-pdf_loader"
version = "0.0.0"  # Set with git tag
description = "This is a temporary project while I wait for my langchain-community [pull-request] to be validated."
authors = ["Philippe PRADOS"]
license = "Apache 2.0"
readme = "PR_README.md"
repository = "https://www.github.com/pprados/langchain-rag"
homepage = "https://www.github.com/pprados/langchain-rag"
packages = [
    { include = "patch_langchain_community" },
    { include = "patch_langchain_unstructured", from = "patch_partners/unstructured" },
]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
langchain-core = ">=0.3.0"
langchain-community = ">=0.3.0"
langchain = ">=0.3.0"
jupyter = "^1.0.0"
# For PDF
amazon-textract-caller = { version = "^0.2.4", optional = true }
markdownify = { version = "^0.13.1", optional = true }
opencv-python = { version = "^4.5", optional = true }
pdfminer-six = { version= "^20231228", optional = true }
pdfplumber = { version = "^0.11.4", optional = true }
pymupdf = { version = "^1.24", optional = true }
rapidocr-onnxruntime = { version = "^1.3", optional = true }
unstructured = { version = "^0.16", extras = ["pdf"], optional = true }
azure-ai-documentintelligence = { version = "^1.0.0b4", optional = true }
pytesseract = { version = "^0.3.13", optional = true }
py-zerox = { version="0.0.7", optional = true }

# New parsers
pymupdf4llm = { version = "^0.0.17", optional = true }
docling = { version = "^2.12", optional = true }
llama_parse = { version = "^0.5", optional = true }

# For Parser Comparator
openpyxl = { version = "^3.1.5", optional = true }
langchain-openai = { version = "^0.2", optional = true }
llama-parse = { version = "^0.5", optional = true }
exceptiongroup = { version = "^1", optional = true }
langchain-unstructured = { version=">=0.1.6", optional = true }

[tool.poetry.extras]
pdf = [
    "amazon-textract-caller",
    "markdownify",
    "opencv-python",
    "pdfminer-six",
    "pdfplumber",
    "pymupdf",
    "rapidocr-onnxruntime",
    "unstructured",
    "azure-ai-documentintelligence",

    "pymupdf4llm",
    "llama-parse",
    "docling",
    "py-zerox",

    "pytesseract",
    "exceptiongroup",
]
parser-comparator = [
    "openpyxl",
    "langchain-unstructured",
]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
torch = "2.2"  # 2.4 bug in MAC
pillow = "*"
playwright = "*"
setuptools = "*"
ipython = "*"
ipykernel = "*"
jupyter = "*"
jupyterlab_rise = "*"
pre-commit = "*"
twine = "*"
importlib-metadata = "*"

[tool.poetry.group.test.dependencies]
# The only dependencies that should be added are
# dependencies used for running tests (e.g., pytest, freezegun, response).
# Any dependencies that do not meet that criteria will be removed.
pytest = "^7.3.0"
pytest-cov = "^4.0.0"
pytest-dotenv = "^0.5.2"
pytest-watcher = "^0.2.6"
freezegun = "^1.2.2"
responses = "^0.22.0"
pytest-asyncio = "^0.20.3"
pytest-mock = "^3.10.0"
pytest-socket = "^0.6.0"
syrupy = "^4.0.2"
wikipedia = '*'
chromadb = "^0.4.10"
aiosqlite = "*"
pgvector = "*"
psycopg2-binary = "*"
langchain_openai = "^0.2"
#langchain-qa_with_references = { path = "../langchain-qa_with_references", develop = true }
#langchain-qa_with_references = "^0.0.330"
faiss-cpu = {version = "^1"}
lark = "^1.1"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
mypy = "^1.8"
ruff = "^0.1.9"
types-toml = "^0.10.8.1"
types-redis = "^4.3.21.6"
types-pytz = "^2023.3.0.0"
black = { version = "24.3.0", extras = ["jupyter"] }
types-chardet = "^5.0.4.6"
mypy-protobuf = "^3.0.0"
types-google-cloud-ndb = "^2.0"
types-docutils = "^0.20"
types-pyyaml = "^6.0.12.2"
types-requests = "^2.28.11.5"

[tool.poetry.group.codespell]
optional = true

[tool.poetry.group.codespell.dependencies]
codespell = "^2.2.5"

[tool.poetry.group.docs.dependencies]
autodoc_pydantic = "^2"
sphinx = ">=7"
sphinx-autobuild = ">=2024"
pydata-sphinx-theme = ">=0.15"
toml = "^0.10.2"
nbconvert = "^7.16"
nbformat = "^5.0"
myst_parser = "^4.0"


[tool.codespell]
skip = '.git,*.pdf,*.svg,*.pdf,*.yaml,*.ipynb,poetry.lock,*.min.js,*.css,package-lock.json,example_data,_dist,examples'
# Ignore latin etc
ignore-regex = '.*(Stati Uniti|Tense=Pres).*'
# whats is a typo but used frequently in queries so kept as is
# aapply - async apply
# unsecure - typo but part of API, decided to not bother for now
ignore-words-list = 'momento,collison,ned,foor,reworkd,parth,whats,aapply,mysogyny,unsecure,damon,crate'


[tool.mypy]
ignore_missing_imports = "True"
disallow_untyped_defs = "True"
no_namespace_packages = "True"
explicit_package_bases = "False"
exclude = []

[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config --durations=5 --snapshot-warn-unused -vv"
markers = [
    "requires: mark tests as requiring a specific library",
    "scheduled: mark tests to run in scheduled testing",
    "compile: mark placeholder test used to compile integration tests without running them",
    "local: mark a test as local",
    "slow: mark a test as slow",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::langchain_core._api.beta_decorator.LangChainBetaWarning",
    "ignore::langchain_core._api.deprecation.LangChainDeprecationWarning:test",
    "ignore::langchain_core._api.deprecation.LangChainPendingDeprecationWarning:test",
]


[tool.pylint.messages_control]
max-line-length = 88
disable = [
 # intentionally turned off
  "bad-mcs-classmethod-argument",
  "broad-except",
  "c-extension-no-member",
  "comparison-with-itself",
  "consider-using-enumerate",
  "import-error",
  "import-outside-toplevel",
  "invalid-name",
  "invalid-unary-operand-type",
  "line-too-long",
  "no-else-continue",
  "no-else-raise",
  "no-else-return",
  "no-member",
  "no-name-in-module",
  "not-an-iterable",
  "overridden-final-method",
  "pointless-statement",
  "redundant-keyword-arg",
  "singleton-comparison",
  "too-many-ancestors",
  "too-many-arguments",
  "too-many-boolean-expressions",
  "too-many-branches",
  "too-many-function-args",
  "too-many-instance-attributes",
  "too-many-locals",
  "too-many-nested-blocks",
  "too-many-public-methods",
  "too-many-return-statements",
  "too-many-statements",
  "unexpected-keyword-arg",
  "ungrouped-imports",
  "unsubscriptable-object",
  "unsupported-assignment-operation",
  "unsupported-membership-test",
  "unused-import",
  "use-dict-literal",
  "use-implicit-booleaness-not-comparison",
  "use-implicit-booleaness-not-len",
  "wrong-import-order",
  "wrong-import-position",
  "redefined-loop-name",

 # misc
  "abstract-class-instantiated",
  "no-value-for-parameter",
  "undefined-variable",
  "unpacking-non-sequence",
  "used-before-assignment",

 # pylint type "C": convention, for programming standard violation
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "superfluous-parens",
  "too-many-lines",
  "unidiomatic-typecheck",
  "unnecessary-dunder-call",
  "unnecessary-lambda-assignment",

  # pylint type "R": refactor, for bad code smell
  "consider-using-with",
  "cyclic-import",
  "duplicate-code",
  "inconsistent-return-statements",
  "redefined-argument-from-local",
  "too-few-public-methods",

  # pylint type "W": warning, for python specific problems
  "abstract-method",
  "arguments-differ",
  "arguments-out-of-order",
  "arguments-renamed",
  "attribute-defined-outside-init",
  "broad-exception-raised",
  "comparison-with-callable",
  "dangerous-default-value",
  "deprecated-module",
  "eval-used",
  "expression-not-assigned",
  "fixme",
  "global-statement",
  "invalid-overridden-method",
  "keyword-arg-before-vararg",
  "possibly-unused-variable",
  "protected-access",
  "raise-missing-from",
  "redefined-builtin",
  "redefined-outer-name",
  "self-cls-assignment",
  "signature-differs",
  "super-init-not-called",
  "try-except-raise",
  "unnecessary-lambda",
  "unused-argument",
  "unused-variable",
  "using-constant-test"
]


[tool.poetry-git-version-plugin]
make_alpha_version = true
alpha_version_format = '{version}a{distance}+{commit_hash}'

[tool.black]
target-version = ['py39', 'py310']
#required-version = '23.11.0'
exclude = '''
(
    asv_bench/env
  | \.egg
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | setup.py
)
'''

[tool.ruff]
line-length = 88
target-version = "py310"
fix = true
unfixable = []
typing-modules = ["pandas._typing"]

select = [
  # pyflakes
  "F",
  # pycodestyle
  "E", "W",
  # flake8-2020
  "YTT",
  # flake8-bugbear
  "B",
  # flake8-quotes
  "Q",
  # flake8-debugger
  "T10",
  # flake8-gettext
  "INT",
  # pylint
  "PL",
  # misc lints
  "PIE",
  # flake8-pyi
  "PYI",
  # tidy imports
  "TID",
  # implicit string concatenation
  "ISC",
  # type-checking imports
  "TCH",
  # comprehensions
  "C4",
  # pygrep-hooks
  "PGH",
  # Ruff-specific rules
  "RUF",
  # flake8-bandit: exec-builtin
  "S102",
  # numpy-legacy-random
  "NPY002",
  # Perflint
  "PERF",
  # flynt
  "FLY",
  # flake8-logging-format
  "G",
  # flake8-future-annotations
  "FA",
]

ignore = [
  ### Intentionally disabled
  # space before : (needed for how black formats slicing)
  "E203",
  # module level import not at top of file
  "E402",
  # do not assign a lambda expression, use a def
  "E731",
  # line break before binary operator
  # "W503",  # not yet implemented
  # line break after binary operator
  # "W504",  # not yet implemented
  # controversial
  "B006",
  # controversial
  "B007",
  # controversial
  "B008",
  # setattr is used to side-step mypy
  "B009",
  # getattr is used to side-step mypy
  "B010",
  # tests use assert False
  "B011",
  # tests use comparisons but not their returned value
  "B015",
  # false positives
  "B019",
  # Loop control variable overrides iterable it iterates
  "B020",
  # Function definition does not bind loop variable
  "B023",
  # Functions defined inside a loop must not use variables redefined in the loop
  # "B301",  # not yet implemented
  # Only works with python >=3.10
  "B905",
  # Too many arguments to function call
  "PLR0913",
  # Too many returns
  "PLR0911",
  # Too many branches
  "PLR0912",
  # Too many statements
  "PLR0915",
  # Redefined loop name
  "PLW2901",
  # Global statements are discouraged
  "PLW0603",
  # Docstrings should not be included in stubs
  "PYI021",
  # Use `typing.NamedTuple` instead of `collections.namedtuple`
  "PYI024",
  # No builtin `eval()` allowed
  "PGH001",
  # compare-to-empty-string
  "PLC1901",
  # while int | float can be shortened to float, the former is more explicit
  "PYI041",
  # incorrect-dict-iterator, flags valid Series.items usage
  "PERF102",
  # try-except-in-loop, becomes useless in Python 3.11
  "PERF203",


  # Useless statement
  "B018",
  # Within an except clause, raise exceptions with ...
  "B904",
  # Magic number
  "PLR2004",
  # comparison-with-itself
  "PLR0124",
  # Consider `elif` instead of `else` then `if` to remove indentation level
  "PLR5501",
  # collection-literal-concatenation
  "RUF005",
  # pairwise-over-zipped (>=PY310 only)
  "RUF007",
  # explicit-f-string-type-conversion
  "RUF010",
  # mutable-class-default
  "RUF012"
]

exclude = [
  "doc/sphinxext/*.py",
  "doc/build/*.py",
  "doc/temp/*.py",
  ".eggs/*.py",
  # vendored files
  "pandas/util/version/*",
  "pandas/io/clipboard/__init__.py",
  # exclude asv benchmark environments from linting
  "env",
]

