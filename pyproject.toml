[tool.poetry]
name = "patch-langchain-pdf_loader"
version = "0.0.0"  # Set with git tag
description = "This is a temporary project while I wait for my langchain-community [pull-request] to be validated."
authors = ["Philippe PRADOS"]
license = "Apache 2.0"
readme = "README.md"
repository = "https://www.github.com/pprados/langchain-rag"
homepage = "https://www.github.com/pprados/langchain-rag"
packages = [
  { include = "patch_langchain_community" },
  { include = "patch_langchain_unstructured", from = "patch_partners/unstructured" },
]


[tool.poetry.dependencies]
python = ">=3.9,<3.13"
langchain-core = ">=0.3.0"
langchain-community = ">=0.3.0"
langchain = ">=0.3.0"
jupyter = "^1.0.0"
# For PDF
amazon-textract-caller = { version = "^0.2.4", optional = true }
markdownify = { version = "^0.13.1", optional = true }
opencv-python = { version = "^4.5", optional = true }
pdfminer-six = { version= "^20231228", optional = true }
pdfplumber = { version = "^0.11.4", optional = true }
pymupdf = { version = "^1.24", optional = true }
pymupdf4llm = { version = "^0.0.17", optional = true }
rapidocr-onnxruntime = { version = "^1.3", optional = true }
unstructured = { version = "^0.15.0", extras = ["pdf"], optional = true }
pytesseract = { version = "^0.3.13", optional = true }
langchain-openai = { version = "^0.2", optional = true }
llama-parse = { version = "^0.5", optional = true }

[tool.poetry.extras]
pdf = [
    "amazon-textract-caller",
    "markdownify",
    "opencv-python",
    "pdfminer-six",
    "pdfplumber",
    "pymupdf",
    "pymupdf4llm",
    "rapidocr-onnxruntime",
    "unstructured",
    "llama-parse",

    "pytesseract",
    "langchain-openai",
]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
playwright = "*"
setuptools = "*"
ipython = "*"
ipykernel = "*"
jupyter = "*"
jupyterlab_rise = "*"
pre-commit = "*"
twine = "*"
importlib-metadata = "*"

[tool.poetry.group.test.dependencies]
# The only dependencies that should be added are
# dependencies used for running tests (e.g., pytest, freezegun, response).
# Any dependencies that do not meet that criteria will be removed.
pytest = "^7.3.0"
pytest-cov = "^4.0.0"
pytest-dotenv = "^0.5.2"
pytest-watcher = "^0.2.6"
freezegun = "^1.2.2"
responses = "^0.22.0"
pytest-asyncio = "^0.20.3"
pytest-mock = "^3.10.0"
pytest-socket = "^0.6.0"
syrupy = "^4.0.2"
wikipedia = '*'
chromadb = "^0.4.10"
aiosqlite = "*"
pgvector = "*"
psycopg2-binary = "*"
langchain_openai = "^0.2"
#langchain-qa_with_references = { path = "../langchain-qa_with_references", develop = true }
#langchain-qa_with_references = "^0.0.330"
faiss-cpu = {version = "^1"}
lark = "^1.1"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
mypy = "^1.8"
ruff = "^0.1.9"
types-toml = "^0.10.8.1"
types-redis = "^4.3.21.6"
types-pytz = "^2023.3.0.0"
black = { version = "^23.1.0", extras = ["jupiter"] }
types-chardet = "^5.0.4.6"
mypy-protobuf = "^3.0.0"
types-google-cloud-ndb = "^2.0"
types-docutils = "^0.20"
types-pyyaml = "^6.0.12.2"
types-requests = "^2.28.11.5"

[tool.poetry.group.codespell]
optional = true

[tool.poetry.group.codespell.dependencies]
codespell = "^2.2.5"

[tool.codespell]
skip = '.git,*.pdf,*.svg,*.pdf,*.yaml,*.ipynb,poetry.lock,*.min.js,*.css,package-lock.json,example_data,_dist,examples'
# Ignore latin etc
ignore-regex = '.*(Stati Uniti|Tense=Pres).*'
# whats is a typo but used frequently in queries so kept as is
# aapply - async apply
# unsecure - typo but part of API, decided to not bother for now
ignore-words-list = 'momento,collison,ned,foor,reworkd,parth,whats,aapply,mysogyny,unsecure,damon,crate'

[tool.ruff]
select = [
  "E",  # pycodestyle
  "F",  # pyflakes
  "I",  # isort
  "T201", # print
]
exclude = [
  "tests/integration_tests/examples/non-utf8-encoding.py",
]


[tool.mypy]
ignore_missing_imports = "True"
disallow_untyped_defs = "True"
no_namespace_packages = "True"
explicit_package_bases = "False"
exclude = []

[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config --durations=5 --snapshot-warn-unused -vv"
markers = [
    "requires: mark tests as requiring a specific library",
    "scheduled: mark tests to run in scheduled testing",
    "compile: mark placeholder test used to compile integration tests without running them",
    "local: mark a test as local",
    "slow: mark a test as slow",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::langchain_core._api.beta_decorator.LangChainBetaWarning",
    "ignore::langchain_core._api.deprecation.LangChainDeprecationWarning:test",
    "ignore::langchain_core._api.deprecation.LangChainPendingDeprecationWarning:test",
]




[tool.poetry-git-version-plugin]
make_alpha_version = true
alpha_version_format = '{version}a{distance}+{commit_hash}'
